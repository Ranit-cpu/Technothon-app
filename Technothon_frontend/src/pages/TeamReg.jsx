import { useState,useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Trash2, Plus, Users, CreditCard } from "lucide-react";

export default function TeamRegistration() {
  const [currentStep, setCurrentStep] = useState(1);
  const [teamData, setTeamData] = useState({
    teamName: "",
    ideaTitle: "",
    ideaDescription: "",
    leaderRole: "",
    teamId: "",
  });

  const [teamMembers, setTeamMembers] = useState([
    {
      id: "leader",
      name: "Team Leader (You)",
      role: "",
      status: "accepted",
      isLeader: true,
    },
  ]);

  const [searchId, setSearchId] = useState("");
  const [selectedRole, setSelectedRole] = useState("");
  const availableRoles = [
    "Frontend Developer",
    "Backend Developer Flask/FastAPI",
    "UI/UX Designer /Git",
    "Data Scientist",
    "Cloud Engineer"
  ];
  const [currentUser, setCurrentUser] = useState(null);

useEffect(() => {
  const fetchUser = async () => {
    try {
      const res = await fetch("http://43.204.96.98:8000/me", {
        credentials: "include",
      });
      if (!res.ok) throw new Error("User not logged in");
      const data = await res.json();
      setCurrentUser(data);

      // Set teamMembers with the real leader
      setTeamMembers([
        {
          id: data.uid,
          name: data.name,
          role: "",
          status: "accepted",
          isLeader: true,
        },
      ]);
    } catch (err) {
      console.error("Error fetching user:", err);
      alert("‚ùå Please log in to continue.");
      window.location.href = "/User_login";
    }
  };

  fetchUser();
}, []);

  // Step 1: Team Registration
  const handleTeamRegistration = async () => {
    if (!teamData.teamName || !teamData.leaderRole) {
      alert("Please fill all fields");
      return;
    }

    // No need for mock teamId; will be generated by backend
    setTeamMembers((prev) =>
      prev.map((member) =>
        member.isLeader ? { ...member, role: teamData.leaderRole } : member
      )
    );

    setCurrentStep(2);
  };

  // Step 2: Add Members
  const handleSearchMember = async () => {
  if (!searchId.trim() || !selectedRole) {
    alert("Please enter member ID and select role");
    return;
  }

  if (teamMembers.length >= 6) {
    alert("Maximum 6 members allowed");
    return;
  }

  const roleExists = teamMembers.some((member) => member.role === selectedRole);
  if (roleExists) {
    alert("This role is already assigned to another member");
    return;
  }

  try {
    const response = await fetch(
      `http://43.204.96.98:8000/search-user?uid=${encodeURIComponent(searchId)}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      }
    );

    if (!response.ok) {
      throw new Error("Member not found");
    }

    const data = await response.json();
    if (!data || data.length === 0) {
      throw new Error("No user found");
    }

    const newMember = {
      id: data[0].uid,
      name: data[0].Name,
      role: selectedRole,
      status: "accepted",
      isLeader: false,
    };

    setTeamMembers((prev) => [...prev, newMember]);
    setSearchId("");
    setSelectedRole("");

    // ‚úÖ Success message here
    alert("Member added successfully!");
  } catch (error) {
    alert("Member not found or error occurred");
    console.error(error);
  }
};
  const removeMember = (memberId) => {
    setTeamMembers((prev) => prev.filter((member) => member.id !== memberId));
  };

  const getAvailableRoles = () => {
    const assignedRoles = teamMembers
      .map((member) => member.role)
      .filter(Boolean);
    return availableRoles.filter((role) => !assignedRoles.includes(role));
  };

const handleFinalizeTeam = async () => {
  // ‚ùóMinimum team member validation
  if (teamMembers.length < 5) {
    alert("‚ùå Minimum 5 members required to finalize the team.");
    return;
  }

  // ‚ùóCheck for roles assigned
  const unassignedMembers = teamMembers.filter((member) => !member.role);
  if (unassignedMembers.length > 0) {
    alert("‚ùå Please assign roles to all team members.");
    return;
  }

  const payload = {
    team_name: teamData.teamName,
//     idea_title: teamData.ideaTitle,
//     idea_description: teamData.ideaDescription,
    event_id: "TT01", // replace with actual event ID if dynamic
    existing_members: teamMembers.map((member) => ({
      uid: member.id,
      role: member.role,
    })),
    created_by_id: teamMembers.find((m) => m.isLeader)?.id,
  };

  try {
    console.log("üì¶ Sending payload:", payload);

    const response = await fetch("http://43.204.96.98:8000/team/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      credentials: "include", // ‚úÖ Send session cookie
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("‚ùå Backend error:", errorData);

      if (response.status === 403) {
        alert("‚ùå Access denied. Please login again.");
      } else if (response.status === 401) {
        alert("‚ùå Unauthorized. Session may have expired.");
      } else {
        alert(`‚ùå Error: ${errorData.detail || "Team registration failed"}`);
      }
      return;
    }

    const data = await response.json();
    console.log("‚úÖ Team registered:", data);

    alert("‚úÖ Team registered successfully!");
    window.location.href = "/payment";
  } catch (error) {
    console.error("‚ùå Error finalizing team:", error);
    alert(`‚ùå Error: ${error.message || "Something went wrong"}`);
  }
};


const canProceed =
  teamMembers.length >= 5 && !teamMembers.some((member) =>¬†!member.role);
  return (
    <div className="min-h-screen" style={{ backgroundColor: "#242424" }}>
      <main className="py-16 px-4">
        <div className="max-w-4xl mx-auto">
          {/* Step 1: Team Registration */}
          {currentStep === 1 && (
            <div className="text-center mb-8">
              <h1 className="text-4xl font-bold text-white mb-4">
                Register Your Team
              </h1>

              <Card className="bg-white/5 backdrop-blur-md rounded-lg border border-white/10 shadow-2xl">
                <CardContent className="p-8 space-y-6">
                  <div>
                    <label className="block text-white text-sm font-medium mb-2">
                      Team Name
                    </label>
                    <Input
                      value={teamData.teamName}
                      onChange={(e) =>
                        setTeamData((prev) => ({
                          ...prev,
                          teamName: e.target.value,
                        }))
                      }
                      className="bg-white/10 backdrop-blur-sm border-white/20 text-white placeholder-white/50 focus:bg-white/15 focus:border-white/30 transition-all duration-200"
                      placeholder="Enter your team name"
                    />
                  </div>

{/*                   <div> */}
{/*                     <label className="block text-white text-sm font-medium mb-2"> */}
{/*                       Idea Title */}
{/*                     </label> */}
{/*                     <Input */}
{/*                       value={teamData.ideaTitle} */}
{/*                       onChange={(e) => */}
{/*                         setTeamData((prev) => ({ */}
{/*                           ...prev, */}
{/*                           ideaTitle: e.target.value, */}
{/*                         })) */}
{/*                       } */}
{/*                       className="bg-white/10 backdrop-blur-sm border-white/20 text-white placeholder-white/50 focus:bg-white/15 focus:border-white/30 transition-all duration-200" */}
{/*                       placeholder="Enter your idea title" */}
{/*                     /> */}
{/*                   </div> */}

{/*                   <div> */}
{/*                     <label className="block text-white text-sm font-medium mb-2"> */}
{/*                       Idea Description */}
{/*                     </label> */}
{/*                     <Textarea */}
{/*                       value={teamData.ideaDescription} */}
{/*                       onChange={(e) => */}
{/*                         setTeamData((prev) => ({ */}
{/*                           ...prev, */}
{/*                           ideaDescription: e.target.value, */}
{/*                         })) */}
{/*                       } */}
{/*                       className="bg-white/10 border-white/20 text-white placeholder-white/50 min-h-[120px]" */}
{/*                       placeholder="Describe your idea in detail" */}
{/*                     /> */}
{/*                   </div> */}

                  <div>
                    <label className="block text-white text-sm font-medium mb-2">
                      Your Role in the Team
                    </label>
                    <Select
                      value={teamData.leaderRole}
                      onValueChange={(value) =>
                        setTeamData((prev) => ({ ...prev, leaderRole: value }))
                      }>
                      {({ isOpen, setIsOpen, value, onValueChange }) => (
                        <>
                          <SelectTrigger
                            className="bg-white/10 backdrop-blur-sm border-white/20 text-white focus:bg-white/15 focus:border-white/30"
                            isOpen={isOpen}
                            setIsOpen={setIsOpen}>
                            <SelectValue
                              placeholder="Select your role..."
                              value={value}
                            />
                          </SelectTrigger>
                          <SelectContent
                            className="bg-gray-900/90 backdrop-blur-md border-white/20 text-white"
                            isOpen={isOpen}>
                            {availableRoles.map((role) => (
                              <SelectItem
                                key={role}
                                value={role}
                                onValueChange={onValueChange}
                                setIsOpen={setIsOpen}
                                className="text-white hover:bg-white/10">
                                {role}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </>
                      )}
                    </Select>
                  </div>

                  <Button
                    onClick={handleTeamRegistration}
                    className="bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 text-white transition-all duration-200">
                    Save and Add Members
                  </Button>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Step 2: Add Members */}
          {currentStep === 2 && (
            <div>
              <div className="text-center mb-8">
                <h1 className="text-4xl font-bold text-white mb-2">
                  Register Your Team
                </h1>
                <h2 className="text-2xl font-semibold text-white mb-4">
                  Add Team Members
                </h2>
                <p className="text-purple-300">
                  You are automatically added as the team creator. Please add 4
                  more members and assign their roles to complete your team (5-6
                  members total).
                </p>
              </div>

              <Card className="bg-white/5 backdrop-blur-md rounded-lg border border-white/10 shadow-2xl mb-6">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    Team Members:
                  </CardTitle>
                  <p className="text-sm text-purple-300">
                    Members: {teamMembers.length}/6
                  </p>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Current Team Members */}
                  <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg p-4">
                    {teamMembers.map((member) => (
                      <div
                        key={member.id}
                        className="flex items-center justify-between py-3 border-b border-white/10 last:border-b-0">
                        <div className="flex items-center gap-3">
                          <span className="text-white font-medium">
                            {member.name}
                          </span>
                          {member.isLeader && (
                            <Badge
                              variant="secondary"
                              className="bg-purple-600 text-white">
                              Team Leader
                            </Badge>
                          )}
                        </div>
                        <div className="flex items-center gap-3">
                          <span className="text-purple-300 text-sm">
                            {member.role || "No role assigned"}
                          </span>
                          {!member.isLeader && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => removeMember(member.id)}
                              className="text-red-400 border-red-400 hover:bg-red-500/10">
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Add New Member */}
                  {teamMembers.length < 6 && (
                    <div className="space-y-4">
                      <h3 className="text-white font-semibold flex items-center gap-2">
                        <Plus className="w-4 h-4" />
                        Search and Add Member
                      </h3>

                      <div>
                        <label className="block text-white text-sm font-medium mb-2">
                          Type UID (e.g., T250001)
                        </label>
                        <Input
                          value={searchId}
                          onChange={(e) => setSearchId(e.target.value)}
                          className="bg-white/10 backdrop-blur-sm border-white/20 text-white placeholder-white/50 focus:bg-white/15 focus:border-white/30 transition-all duration-200"
                          placeholder="Type UID (e.g., T250001)"
                        />
                      </div>

                      <div>
                        <label className="block text-white text-sm font-medium mb-2">
                          Role for Selected Member
                        </label>
                        <Select
                          value={selectedRole}
                          onValueChange={setSelectedRole}>
                          {({ isOpen, setIsOpen, value, onValueChange }) => (
                            <>
                              <SelectTrigger
                                className="bg-white/10 backdrop-blur-sm border-white/20 text-white focus:bg-white/15 focus:border-white/30"
                                isOpen={isOpen}
                                setIsOpen={setIsOpen}>
                                <SelectValue
                                  placeholder="Select role for this member..."
                                  value={value}
                                />
                              </SelectTrigger>
                              <SelectContent
                                className="bg-gray-900/90 backdrop-blur-md border-white/20 text-white"
                                isOpen={isOpen}>
                                {getAvailableRoles().map((role) => (
                                  <SelectItem
                                    key={role}
                                    value={role}
                                    onValueChange={onValueChange}
                                    setIsOpen={setIsOpen}
                                    className="text-white hover:bg-white/10">
                                    {role}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </>
                          )}
                        </Select>
                      </div>

                      <Button
                        onClick={handleSearchMember}
                        className="bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 text-white transition-all duration-200"
                        disabled={!searchId || !selectedRole}>
                        Add Selected Member
                      </Button>
                    </div>
                  )}

                  <Button
                    onClick={handleFinalizeTeam}
                    className={`backdrop-blur-sm border transition-all duration-200 ${
                      canProceed
                        ? "bg-purple-500/20 border-purple-400/30 hover:bg-purple-500/30 text-white"
                        : "bg-white/5 border-white/10 text-white/50 cursor-not-allowed"
                    }`}
                    disabled={!canProceed}>
                    Finalize Team Registration
                  </Button>

                  <div className="text-center text-white/70 text-sm space-y-1">
                    <p>Team Members: {teamMembers.length}/6</p>
                    <p>Minimum 5 members required to proceed</p>
                    {teamMembers.length >= 5 && (
                      <p>
                        Roles assigned:{" "}
                        {teamMembers.filter((member) => member.role).length}/
                        {teamMembers.length}
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}